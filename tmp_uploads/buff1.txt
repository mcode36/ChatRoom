        // col_post.find({}).sort({ date: -1 }).limit(posts_per_page).skip(7).toArray((err, posts) => {
		
        col_post.find({}, query_options).toArray((err, posts) => {
          if (err) { console.log("error retrieving posts."); }
          // set page object
          let page = {};
          let max_page = Math.ceil(posts.length / posts_per_page);
          if (page_n + 1 <= max_page) { page.next = page_n + 1; } else { page.next = 'NA' }
          if (page_n - 1 >= 1) { page.prev = page_n - 1; } else { page.prev = 'NA' }
          console.log(posts, posts_per_page, max_page, page)

          // post processing posts array
          for (let i = 0; i < posts.length; i++) {
            // post processing date field
            let d = new Date(posts[i].date);
            let d_string = d.toLocaleString('default', { month: 'long' }) + ' ' + d.getDate() + ', ' + d.getFullYear();
            posts[i]['d_string'] = d_string;
            // post processing content field
            let text = '', x = 0;
            let t = h2p(posts[i].content).split(' ');
            while (true) {
              text = text + t[x] + ' ';
              x += 1;
              if (x >= t.length) { break; }
              if (text.length > 220) { text = text + '...'; break; }
            }
            // post processing object_position_style
            posts[i]['object_position_style'] = 'object-position:' + posts[i]['spriteOffset'] + 'px 0px';

            // post processing other variables
            posts[i]['plain_text'] = text;
            posts[i]['author'] = uname_dict[posts[i]['author_id']];
            posts[i]['avatar'] = avatar_dict[posts[i]['author_id']];
          }
          res.render('posts.html', { user: sess.authUser, posts: posts, page: page });
        });